数据模型是隐藏了许多低级存储细节的高级数据描述结构的集合。
关系是记录的集合。
模式：基于数据模型的数据描述称为模式。
字段是属性或列。
选择行、投影列
关系就是数据！！！！
数据库描述由三级抽象模式组成：外模式、逻辑（概念）模式、物理模式。
概念模式描述数据库中的所有关系
任何给定的数据库只有一个概念模式和一个物理模式，因为他只有一组存储关系，但他可以有多个外模式
表是数据库中数据存储的基础，而视图只是为了满足某种查询要求而建立的一个对象。
表是内模式，视图是外模式
视图是查看数据表的一种方法，可以查询数据表中某些字段构成的数据，只是一些SQL语句的集合。从安全的角度说，视图可以不给用户接触数据表，从而不知道表结构
关系数据库的物理模式描述了概念模式的❤关系是按照什么文件结构，以及什么样的索引来存储的。
概念模式是指存储在数据库中的关系的模式
❤通过使用视图定义外部模式中的关系，可以对应用隐藏数据库概念模式的变化
外模式中定义的关系不存储在DBMS中，而是进过计算，以概念模式描述的关系的形式存储在DBMS中
事务是DBMS中用户程序的任何一次执行，包含若干条访问数据库的语句。
实体集用矩形，属性用椭圆。实体通过一组属性来描述。
联系是实体之间的关联。
“在任何Manages的实例中，每个Departments实体最多出现在一个Manages联系中。” 联系集。
码是最小的属性集合，唯一确定实体集中的一个实体。
弱实体、识别属主：一个弱实体可以通过它的一些属性与其他实体的主码结合起来形成唯一标志，称为识别属主
聚合：在几个联系中表达一个联系时，需要用到。
码约束，对一个给定的实体，可以唯一确定出现在其中的联系。
一个关系是由参与的实体所唯一确定的！！
如果一个实体的一个属性需要记录多个值，要把这个属性变为实体集。
联系必须能够用参与它的实体唯一确定，而不必引用该联系的描述属性！！！！
ER模型允许我们利用对象和他们之前的关系来描述数据。用于数据库最初的涉及。
需求分析、概念数据库设计、逻辑数据库设计(将ER模式转化为关系数据库模式)都要用到ER模型。
概念数据库设计得到的是一个关系模式的集合和一组完整性约束。
完整性和一致性
关系模型由关系模式和关系实例组成！！！实例就是表。
完整性约束是数据库模式定义时指定的约束条件。
违反完整性约束条件，DBMS拒绝执行。
SQL结构化查询语句
查询到输入和输出都是关系，它通过对输入的实例进行求值，同时产生输出关系的一个实例。
关系代数称为过程性语言，关系演算是描述性语言，他们在表达能力上是等价的。都用于查询。
SQL中，每个查询必须有一个select子句和from子句，分别指定结果中的※投影兴※列和叉积。Where说明了在from指定的表上的※选择※条件
SQL的三种集合操作符UNION INTERSECT EXCEPT
SQL聚集操作符COUNT SUM AVG MAX MIN(S.age)括号中是属性，没有GROUP BY的话，SELECT只能有聚集操作符。就是聚集操作符返回一个数而已。
GROUP BY实质上是分多个组，每组里面用聚集操作符返回一个数（一行）。
HAVING子句决定一个给定分组是否最终产生一个结果行！！
DBMS 业务逻辑 客户端三部分 MVC
CGI通用网关接口Common Gateway Interface。将HTML表单和应用程序相连。定义了来自表达你的参数传递到服务器端程序的协议。
HTTP的无状态性是实现的简便性和应用开发的简便性之间的一种折中方案。HTTP设计者选择了保持协议本身的简单性，将超出请求对象功能的其他功能推到了HTTP协议之上的应用层
索引是在磁盘上组织数据记录的一种数据结构，用于优化数据检索。可以在一个给定的数据记录集合上创建多个索引。三种索引。第一种索引项本身就是文件记录。二三种索引文件分离。
数据记录的顺序与某一索引的数据项顺序相同或类似，就称这一索引为聚族索引。第一种是。聚族文件，索引就是数据记录的文件。
B+树索引的平均扇出（非叶节点平均孩子树）至少是100。由于高扇出率，B+树高度很少超过4
读或写一个磁盘页的时间是15ms，处理一个记录或hash到一个记录时间为100ns
RAID独立冗余磁盘阵列（zhenlie）可靠性和性能的折中。把几个磁盘组织在一起的一种方式。
静态哈希，可扩展哈希、线性哈希。
事务是用户程序的执行，对DBMS来说是一个读写操作序列。
事务的原子性、一致性、隔离性、持久性。
事务的持久性：如果在已经结束的事务还没有将修改的数据写入磁盘之前，系统发生了崩溃，系统恢复是可以利用日志恢复已经进行的修改。
2PL两阶段加锁共享锁，排它锁
读未提交的数据（脏读）WR，不可重复的读RW，重写未提交的数据RR
在设计完概念和外模式后，也就是说按照一定的完整性约束集合生成了一组关系和视图之后。必须通过物理数据库设计（物理模式）来解决性能问题（缓冲池大小或检查点频率）
并行数据库系统、分布式数据库系统。
并行数据库系统：共享内存（存在内存访问冲突）、共享磁盘（拥有自己的私有内存）、无共享资源系统（拥有私有内存和磁盘）。
共享内存和共享磁盘结构基本的问题是冲突问题。
CPU每秒处理的事务数。
并行：数据划分分为轮转划分、哈希划分、区域划分。（处理机i的选择）
分布式数据库系统的类型：同构分布式数据库系统（数据分布在各个场地运行相同的DBMS），异构分布式数据库系统（节点是自治的，并且能通过网络访问其他站点的数据）
数据挖掘是在大型数据集中发现一些有趣的趋势或模式，以便指导未来活动的决策
KDD知识发现过程：数据选择、数据净化、数据挖掘、评价阶段。
决策树是对一组分类规则的图形描述。两个阶段：增长阶段（精确的描述输入数据库的记录），缩减阶段（生成更加一般的规则）。
索引都是定位记录行的！！！
Hash索引仅仅能满足“=”,“IN”,“<=>”查询，不能使用范围查询。是直接定位的。定位行！！！！
Hash索引是将索引键通过Hash运算之后，将Hash运算结果的Hash值和所对应的❤行指针❤信息存放于一个Hash表中，由于不同索引键存在相同Hash值，所以即使满足某个Hash键值的数据的记录条数，也无法从Hash索引中直接完成查询，还是要通过访问表中的实际数据进行比较，并得到相应的结果。 
哈希索引只包含哈希值和行指针
BTree索引是最常用的mysql数据库索引算法，因为它不仅可以被用在=,>,>=,<,<=和between这些比较操作符上，而且还可以用于like操作符，只要它的查询条件是一个不以通配符%开头的常量(意思是只能查以..开头的)；如果以通配符%开头表示查询以..结尾的或者包含的，或者没有使用常量，则不会使用索引。
5. Hash索引遇到大量Hash值相等的情况后性能并不一定会比BTree高 
对于选择性比较低的索引键，如果创建Hash索引，那么将会存在大量记录指针信息存于同一个Hash值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据访问，而造成整体性能底下。
我们利用索引进行查询的时候，不可能把索引直接加载到内存中，只能一次读取一个磁盘页，一个磁盘页对应着一个节点，一次读取操作时一个磁盘io。在二叉树查询时，最坏的情况下查找的次数是树的高度，即io次数为树的高度。B-树就是比二叉树“矮胖”的树。
B和B+可以认为是m叉的多路平衡查找树
Hash等值查找，B+树等值+范围查找
※只要是只需要做等值比较查询，而不包含排序或范围查询的需求，都适合使用哈希索引
B+树支持>、>=、<、<= 、between ... and ...、like 等等
B+树的优点：
io次数少：b+树中间节点只存索引，不存在实际的数据，所以可以存储更多的数据。索引树更加的矮胖，io次数更少。
性能稳定：b+树数据只存在于叶子节点，查询性能稳定
范围查询简单：b+树不需要中序遍历，遍历链表即可。
优化查询：外键、索引、联合查询、选择特定字段等等
数据存储引擎
InnoDB：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。
MyISAM：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。
MEMORY：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。
可以认为是m叉的多路平衡查找树
MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁
可重复读（Repeatable Read）隔离级别设置你的事务，SQL Server对读取数据把持需要的共享锁（Shared Locks）直到事务的结束
乐观锁 版本控制信息 有版本号，时间戳，待更新字段，所有字段
唯一、不为空、经常被查询的字段适合作为索引
范式是为了消除重复数据来减少冗余数据,从而让数据库内的数据更好地组织,让磁盘空间得到更有效利用的一种标准化准则
exists强调的是是否返回结果集，不要求知道返回什么。就是返回一个列的所有行