Linux准确的来说是内核，但也用来代指内核+一大堆其他软件（工具和库）所构成的完整操作系统
POSIX（portable operating system interface，可移植操作系统接口）
电气和电子工程师协会（IEEE，全称是Institute of Electrical and Electronics Engineers）
内核：管理和分配计算机资源（CPU、RAM、设备）的核心层软件
CPU在两种不同的状态下运行：用户态和核心态
超级用户ID为0
init进程最牛逼，主要任务为创建并监控系统运行所需的一系列进程。pid=1
文本、数据、堆、栈。fork之后只读文本由子父进程共享，其余的创建副本，互不影响
目标库：将通常是逻辑相关的一组函数代码加以编译，并置于一个文件中，供其他应用程序调用。
IPC进程间通信
☆系统调用将CPU从用户态切换到核心态，以便CPU访问受到保护的内核内存（重要表述）
一次系统调用一般大于0.3微妙。C语言返回的开销是系统调用的1/20。（例子）
调用系统调用xyz()等价于调用外壳函数(wrapper)，由wrapper函数去调用系统调用xyz()
GNU C语言函数库glibc
$ldd myprog | grep libc  针对某个与glibc动态链接的可执行文件，运行ldd找到依赖文件，再找libc。找到glibc的路径。
errno.h有几个。errno全局变量定义在其中一个.h文件中
read/write单位为字节
while((numRead=read(inputFd,buf,BUF_SIZE))>0)这里连续的read偏移量自动调整递进
lseek(fd,-1,SEEK_END);最后一个字节
lseek(fd,0,SEEK_CUR);返回现在的offset
文件描述符0,1,2是自带的，后面自己打开的文件其依次递增
文件不存在且未指定O_CREAT,错误。
☆open()调用的flag包括访问模式和状态标志
这些系统调用函数open/read/write/close/lseek/fcntl，错误统统返回-1。用errno来查看不同错误
exit(0)正常退出
用O_CREAT和O_EXCL标志来保持系统调用原子性.还有O_APPEND
ssize_t/mode_t/size_t都在<sys/types.h>中
fcntl.h定义了O_RDONLY等宏
fcntl这个函数很强大
O_RDONLY O_WRONLY ORDWR在open中不能同时使用
O_CREAT使用了，即使是只读也有效。此时必须提供mode参数提供权限
进程级的文件描述符表、系统级的打开文件表(句柄)、文件系统的i-node表
两个不同的文件描述符，若指向同一打开文件句柄，将共享同一文件偏移量
dup是用来指定新的文件描述符，指向同一打开文件句柄
进程下的所有线程将共享同一文件描述符表 
pread和pwrite在修改后offset处读写后立即恢复，不影响当前偏移量，用于多线程防止竞争
readv()分散输入和writev()集中输出(原子性一次性)
---------6进程-----------
进程由用户内存空间和一系列内核数据结构组成。内存空间包含了程序代码及代码变量，内核数据结构用于维护进程状态信息
pid到了32767重置300开始
PID在/proc里面,从1开始编号
页大小通常4KB
clearenv()清除程序所引用所有环境变量(实际电脑存在)
栈：局部变量 、函数实参、返回值。
malloc基于8字节或者16字节边界来分配内存
进程终止时，其占用的所有内存都会返回给操作系统，包括malloc
--------8用户和组----------
每个文件和每个进程都有特定的用户ID和组ID
UID为0就是ROOT
[a-zA-Z0-9/.]
密码文件和shadow密码文件
pwd.h的struct passwd中的密码pw_passwd字段，在未启用shadow时才有效。一般都启用了shadow，pw_passwd无效，为x。转而看shadow.h中struct spwd中的sp_pwdp字段（一般会Permission denied，必须su）
------10时间12系统和进程信息-------------
t=time(NULL);返回自1970以来的秒数,time_t是一个有符号
pathname可以是当前的(用.)，也可以是/
/proc/PID和dev/fd
/proc虚拟的，因为其不存在与磁盘上，是内核在进程访问动态生成的
------13IO--------------
内核缓冲区高速缓存(kernel buffer cache)write和read不是直接搞定。
系统调用的开销：内核必须捕获调用，检查系统调用参数的有效性，在用户空间和内核空间之间传输数据
如果与文件发生大量的数据传输，采用大块空间缓冲数据、以及执行更少的系统调用，可以提升IO性能
int fflush(FILE *stream)输出将stdio缓冲区强制刷新到内核缓存，由内核缓存写。输入则丢弃已缓冲的
O_SYNC强制同步，每次调用write必须刷新到磁盘上才罢休。性能很差，因为将每个缓冲区数据向磁盘传递时会把程序阻塞
大多数linux文件系统不会记录文件的创建时间
struct stat文件的数据结构
文件创建时，其用户ID取自进程的有效用户ID，而组ID则取自进程的或父目录的组ID
※set-user-ID和set-group-ID不理解135页
i-node表的编号始于1
i-node条目可以是目录，标记目录类型
硬链接指向相同的i-node,删除一个另一个存在
硬链接必须在同一文件系统中。硬链接不能是目录。软链接全部反之
☆i-node不仅有链接计数(文件)，还有打开文件描述计数(进程)。仅当关闭所有文件描述符，方可删除一个已打开的文件(哪怕链接数为0)
-----------20信号-----------
针对每个信号，都定义了一个唯一的整数，从1开始
信号分为两大类。第一组用于内核向进程通知事件，1-31。另一组由实时信号构成
执行信号处理程序，是个好方法
核心转储文件包含对进程虚拟内存的镜像，可将其加载到调试器中以检查进程终止时的状态
默认情况下，要么忽略信号，要么终止进程(生成或不生成核心 转储文件)，要么停止一个正在运行的进程，要么重启一个已停止的进程
可以使用signal或者sigaction()来显式忽略一个信号，或者一个自己定义的信号处理器程序(handler)
kill来完成进程向另一进程的发送信号。
signal或sigaction()作用范围是该语句向下的所有语句，直到再次调用signal或sigaction
---------------24进程的创建--------------
用一个进程的exit(status)来响应另一个进程的wait(&status)。wait(NULL)实现同步
status只有低八位可被父进程用，定义了进程终止的状态
pid_t fork()两个进程将执行相同的程序文本段，但却各自拥有不同的栈段，数据段以及堆段拷贝。子进程返回0
fork()后面的代码段共同执行，前面的只有父进程执行
getpid()子进程自身id，getppid()父进程ID
switch(childPID = fork())可以在for循环里面，创建多个
getpid强制转long
子进程获得父进程所有文件描述符副本。偏移量也是副本一样的，可以各自处理相互不影响
vfork()共享内存，在子进程调用exec()或_exit()之前，暂停执行父进程。保证子进程优先执行CPU
setbuf(stdout,NULL)  make stdout unbuffered
进程终止，关闭所有打开文件描述符，目录流，信息目录描述符，以及字符集转换描述符。释放所有文件锁
进程终止两种方式：信号和exit()
sysconf(MAX_INT)查看宏
程序一般不会直接调用_exit()，而是调用库函数exit()，它会在调用_exit()之前执行各种动作
exit()会调用退出处理程序(通过atexit()和on_exit()注册的函数)；刷新stdio流(就是要输出)；使用由status提供的值执行_exit()系统调用
☆write()会将数据立即 传给内核高速缓存，而printf()的输出则要等到调用exit()刷新stdio缓冲区。
☆fflush()刷新缓冲区；setvbuff()和setbuff来关闭stdio流的缓冲功能
--------26监视子进程-----------
循环调用childPID=wait(NULL)，子进程成功退出后父进程挨个执行
☆wait()无法等待某个特定子进程的完成，只能按顺序等待下一个子进程的终止；wait有可能一直等下去；wait只能发现终止的子进程，暂时停止或继续的无能为力(SIGSTOP,SIGTTIN,SIGCONT)   于是有了waitpid()
status只有最低两个字节有效
status在wait()或waitpid()参数被赋值！！
父进程执行wait()之后，由于不再需要子进程所剩余的最后信息，故而删除僵尸进程。父进程来不及执行wait()就退出，init接管，自动调用wait(),退出
system(char *cmd)牛逼。传入shell命令
无论一个子进程于何时终止，系统都会向其父进程发送SIGCHLD信号
☆子进程继承父进程的环境变量，shell执行每个命令时所创建的进程也就继承了shell的PATH
pathname包括.(点)和/，argv[0]只是basename，不包括.（点）和/
解释器，就是能够读取并执行文本格式命令的程序。包括shell、python等。
由exec()的调用程序(父进程)所打开的所有文件描述符在exec()的执行过程中会保持打开状态。
exec()在执行时会将现有进程的文本段丢弃
打开进程记账功能后，内核会在每个进程终止时将一条记账信息写入系统级的进程记账文件。acct记录(struct)
clone()生成的子进程继续运行时不以调用处为起点，而是转而去执行参数函数func
flags多半可以用|来加入。什么也没有是0
--------------29线程---------------
同一程序中的所有线程均会独立执行相同的程序，且共享同一份全局内存区域，包括初始化未初始化数据段，堆内存段。
pthread_creat()正常返回0，错误返回正数且与errno含义相同。有关pthread的函数都是返回errno
必须将pthread_t作为不透明的数据类型对待，不能用等号判断。要用pthread_equal()。在其他系统中可能是指针或结构(linux是unsigned long)
关心线程返回的状态:pthread_join()。不关心状态，只希望线程终止时自动清理：pthread_detach()。
pthread_join()执行的功能类似于与针对进程的waitpid()。但有区别
调用pthread_exit()相当于在线程start函数中执行return
线程的主要优势是通过全局变量来共享信息
☆pthread_cond_wait()会自动执行最后两步中对互斥量的解锁和加锁动作
静态变量在进程中只有一个实例
key是全局变量。一个函数一个key，可以有多个key。1个key对应一个数据块。每个线程调用这个key，每个线程的key应该一样，每个线程都有各自的数据块(抽象，p545)
每个线程的key一样，但都有这个key对应的各自不同的数据块(地址不同)。
pthread_getspecific(key)返回key在本线程对应的值(数据块地址)
线程刚刚创建时，会将所有线程特有数据的指针都初始化为NULL。
函数必须为每个调用者线程分配单独的存储，且只需要在线程初次调用此函数时分配一次即可。
当使用线程特有数据的线程终止时，自动调用解构函数(pthread_once()的参数)