如果你从这里克隆，Git 会自动为你将此远程仓库命名为origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地master 分支，始于 origin 上 master分支相同的位置，你可以就此开始工作

git remote add 远程仓库名 url 
这个就不一样了，名字可以是origin也可以是其他，同克隆反向，但克隆有默认，这个没有。


git push (远程仓库名) (本地分支名:远端分支名)       //括号内一个名字，则默认远端和本地一致
git fetch (远程仓库名) (远端分支名:本地分支名)      //括号内一个名字，则默认本地和远端一致
 
git fetch相当于是从远程获取最新版本到本地，不会自动merge，生成或更新origin/master（这个本地无法操作的指针）
git pull：相当于是从远程获取最新版本并merge到本地，生成或更新origin/master并合并到当前分支。


假设远程仓库origin有远程分支dev
本地操作：
git fetch origin
之后可以在当前分支对其进行合并（自动生成了origin/dev这个指针在本地）
git merge origin/dev
或
如果想要一份自己的 dev来开发，可以在远程分支的基础上分化出一个新的分支来：（跟踪分支）
git checkout -b dev origin/dev 第一个dev可以变

☆在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是git push 和 git pull 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：git checkout -b [分支名] [远程名]/[分支名]

☆从远程分支 checkout 出来的本地分支，称为_跟踪分支(tracking branch)_。跟踪分支是一种和远程分支有直接联系的本地分支。在跟踪分支里输入git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。反过来，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。